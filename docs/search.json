[
  {
    "objectID": "tutorials.html",
    "href": "tutorials.html",
    "title": "Tutorials",
    "section": "",
    "text": "Creating Interactive Maps with R: A Beginner’s Guide Using ggplot2 and leaflet\n\n\n\nR\n\n\nR Tutorial\n\n\nMaps\n\n\nggplot\n\n\nleaflet\n\n\ntidyverse\n\n\nenvironmental monitoring\n\n\n\n\n\n\n\nKishore Kumar Jagadeesan\n\n\nJul 11, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "My Blog",
    "section": "",
    "text": "New Look\n\n\n\nQuarto\n\n\nR\n\n\n\nNew look for the website\n\n\n\nKishore Kumar Jagadeesan\n\n\nJul 11, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Kishore Kumar Jagadeesan",
    "section": "",
    "text": "Hello! I’m Kishore Kumar Jagadeesan, a Research Associate with a passion for environmental science, water quality, and public health. Currently, I’m @ the University of Bath , where I excel in creating research tools for statistical analysis and data visualization across diverse disciplines. Feel free to explore my website to learn more!"
  },
  {
    "objectID": "courses/index.html",
    "href": "courses/index.html",
    "title": "Data Analysis and Visualization in R",
    "section": "",
    "text": "Course description\nIn today’s data-driven era, mastering data visualization is essential. This course equips you with practical skills to transform raw data into meaningful visual stories that drive understanding and decision-making. Whether you’re a data enthusiast or a professional looking to enhance your visualization prowess, this course offers invaluable insights and hands-on practice.\n\nLearning Objectives:\nBy the end of this course, participants will:\n\nIdentify appropriate visualization types for different datasets and audiences.\nPrepare data through cleaning, exploration, and formatting using R.\nCreate impactful, accessible, and visually appealing visualizations using ggplot2 and its extensions.\nDevelop proficiency in coding from scratch for data visualization tasks.\n\n\n\nCourse Highlights:\n\nUnderstanding Data Visualization: Learn to identify the most suitable visualization types for your data and audience.\nData Preparation: Master techniques to clean, explore, and format data for visualization using R.\nBuilding Visualizations: Utilize R, including ggplot2 and its extensions, to craft impactful and visually engaging charts.\nHands-on Practice: From coding essentials to advanced techniques, gain practical insights through interactive learning.\n\n\n\n\n\nWhen is this taught?\nCourse Link: Course website\nDates: May 14th and 15th, 2022\nAudience: Members of the Marie Curie Alumni Association - India Chapter\nSupported By: The Carpentries\nFunded By: Marie Curie Alumni Association\nThis course combined theoretical foundations with hands-on practice, empowering participants to leverage data visualization for impactful communication and decision-making. Stay tuned for future opportunities to advance your skills in data analysis and visualization with us!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Currently Postdoctoral Research Associate in Environmental Chemistry & Public Health Research Group , Department of Chemistry, University of Bath, UK\nPhD (Biomedical Engineering) from Lund University. My PhD thesis involved development of high-throughput mass spectrometry method to screen solid-phase extraction materials.\nDuring my PhD developed MALDIViz, a comprehensive informatics tool for handling dataset from the screening studies. This application can be used to do quality checks, visualizations and analysis of mass spectrometry data."
  },
  {
    "objectID": "courses.html",
    "href": "courses.html",
    "title": "Courses",
    "section": "",
    "text": "Data Analysis and Visualization in R\n\n\n\ndata-visualization\n\n\nR\n\n\nggplot\n\n\ntidyverse\n\n\n\na two day hands-on course covering the basic principles for effective communication through data visuallisation!\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2024-07-11-newlook/index.html",
    "href": "posts/2024-07-11-newlook/index.html",
    "title": "New Look",
    "section": "",
    "text": "CitationBibTeX citation:@online{kumar jagadeesan2024,\n  author = {Kumar Jagadeesan, Kishore},\n  title = {New {Look}},\n  date = {2024-07-11},\n  url = {https://jkkishore85.github.io/mysite/posts/2024-07-11-newlook/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nKumar Jagadeesan, Kishore. 2024. “New Look.” July 11, 2024.\nhttps://jkkishore85.github.io/mysite/posts/2024-07-11-newlook/."
  },
  {
    "objectID": "tutorials/2024-07-11-rtutorial-map-01/index.html",
    "href": "tutorials/2024-07-11-rtutorial-map-01/index.html",
    "title": "Creating Interactive Maps with R: A Beginner’s Guide Using ggplot2 and leaflet",
    "section": "",
    "text": "TL;DR\n\n\n\nIn this tutorial, you’ll learn how to create static maps using ggplot2 and interactive maps using leaflet in R. We’ll cover the basics, provide code examples, and include tips and troubleshooting advice. By the end, you’ll be able to create customized maps to visualize geographic data effectively.\nWelcome to this step-by-step tutorial where you’ll learn how to create beautiful and interactive maps using R. We’ll be using two powerful R packages: ggplot2 for static maps and leaflet for interactive maps. Whether you’re a beginner or looking to refine your mapping skills, this guide will walk you through the basics and provide some handy tips and tricks along the way."
  },
  {
    "objectID": "tutorials/2024-07-11-rtutorial-map-01/index.html#introduction",
    "href": "tutorials/2024-07-11-rtutorial-map-01/index.html#introduction",
    "title": "Creating Interactive Maps with R: A Beginner’s Guide Using ggplot2 and leaflet",
    "section": "Introduction",
    "text": "Introduction\nMapping is a crucial part of data visualization, helping to present geographic data in an easily understandable way. In this tutorial, we will:\n\nCreate a static map using ggplot2.\nCreate an interactive map using leaflet.\n\nBy the end of this guide, you will have a good understanding of how to create and customize maps in R.\n\n\n\n\n\n\nWhen to Use Which\n\n\n\n\nggplot2: Ideal for static visualizations and publication-quality maps.\nleaflet: Perfect for interactive and dynamic maps that engage users."
  },
  {
    "objectID": "tutorials/2024-07-11-rtutorial-map-01/index.html#prerequisites",
    "href": "tutorials/2024-07-11-rtutorial-map-01/index.html#prerequisites",
    "title": "Creating Interactive Maps with R: A Beginner’s Guide Using ggplot2 and leaflet",
    "section": "Prerequisites",
    "text": "Prerequisites\nEnsure you have R and RStudio installed on your computer. You will also need to install the necessary packages.\ninstall.packages(c(\"ggplot2\", \"magrittr\",  \"sf\", \"leaflet\", \"rnaturalearth\", \"rnaturalearthdata\", \"ggspatial\", \"ggrepel\", \"htmlwidgets\"))"
  },
  {
    "objectID": "tutorials/2024-07-11-rtutorial-map-01/index.html#creating-a-static-map-with-ggplot2",
    "href": "tutorials/2024-07-11-rtutorial-map-01/index.html#creating-a-static-map-with-ggplot2",
    "title": "Creating Interactive Maps with R: A Beginner’s Guide Using ggplot2 and leaflet",
    "section": "Creating a Static Map with ggplot2",
    "text": "Creating a Static Map with ggplot2\n\nStep 1: Load the Libraries\nFirst, load the required libraries.\n\n\nCode\n1library(ggplot2)\n2library(magrittr)\n3library(rnaturalearth)\n4library(rnaturalearthdata)\n5library(sf)\n\n\n\n1\n\nLoad the ggplot2 package for data visualization.\n\n2\n\nLoad the magrittr package for pipe operations.\n\n3\n\nLoad the rnaturalearth package to access natural earth map data.\n\n4\n\nLoad the rnaturalearthdata package for additional natural earth data.\n\n5\n\nLoad the sf package for handling spatial data.\n\n\n\n\n\n\nStep 2: Load the Data\nFor this tutorial, we’ll use the rnaturalearth package, which provides natural earth vector map data in various scales. We’ll load world map data using this package.\n\n\nCode\n1world_map &lt;- rnaturalearth::ne_countries(scale = \"medium\", returnclass = \"sf\")\n\n\n\n1\n\nLoads the world map data at a medium scale and returns it as an sf (simple features) object.\n\n\n\n\n\n\nStep 3: Create the Map\nWe’ll use ggplot2 to plot the world map.\n\n\nCode\n1ggplot_map &lt;- ggplot2::ggplot(world_map) +\n2  ggplot2::geom_sf() +\n3  ggplot2::theme_minimal() +\n4  ggplot2::labs(title = \"World Map\", x = \"Longitude\", y = \"Latitude\") +\n  ggplot2::theme(\n    panel.grid.major = element_line(color = gray(.5), \n5                                    linetype = \"dashed\", size = 0.5),\n6    panel.background = element_rect(fill = \"aliceblue\"))\n7ggplot_map\n\n\n\n1\n\nCreate a ggplot object using world_map data.\n\n2\n\nPlot the geographic features using geom_sf.\n\n3\n\nApply a minimal theme to the plot.\n\n4\n\nAdd title and axis labels.\n\n5\n\nCustomize the major grid lines.\n\n6\n\nSet the background colour to aliceblue.\n\n7\n\nDisplay the map.\n\n\n\n\n\n\n\n\n\n\n\n\n\nStep 4: Save the Map\nOnce the final map is prepared, it can be conveniently saved in various formats using the ggsave() function. The formats include the widely used PNG (a raster bitmap) and PDF (vector graphics), with the ability to control the size and resolution of the output. In this case, we are saving a PDF version of the map, which maintains the highest quality, and a PNG version for web usage\nggplot2::ggsave(\"ggplot_map.png\", \n       plot= ggplot_map, \n1       width = 6, height = 8, dpi = \"screen\")\nggplot2::ggsave(\"ggplot_map.pdf\", \n       plot= ggplot_map, \n2       width = 6, height = 8, dpi = 300)\n\n1\n\nSave map as a PNG file with screen resolution.\n\n2\n\nSave map as a PDF file with 300 dpi resolution\n\n\n\n\n\n\n\n\nggsave()\n\n\n\nIf you’re creating a PDF for web use, a dpi of 72 is usually sufficient. If you’re creating a PDF for print, a dpi of 300 or higher is recommended. If you’re not sure what dpi to use, it’s best to check with your printer or the specifications of the website where you plan to upload the PDF.\n\n\n\n\nCustomizing the Static Map\n\nAdding additional layers: An Example with Points\nTo make your static map more informative and visually appealing, you can add additional layers such as points representing specific locations. Here’s how to do it step-by-step.\n\nStep 1: Create a Data Frame with Location Data\nFirst, create a data frame containing the locations you want to plot on the map.\n\n\nCode\n1sites &lt;- data.frame(\n2  city = c(\"Bath\",\"Keynsham\", \"Bristol\", \"Chippenham\", \"Trowbridge\"),\n3  latitude = c(51.380001, 51.41505900, 51.45451300, 51.45805800, 51.31966400),\n4  longitude = c(-2.360000, -2.50252600, -2.58791000, -2.11607390, -2.20885300))\n5head(sites)\n\n\n\n1\n\nCreate a data frame named sites.\n\n2\n\nDefine the city column with city names.\n\n3\n\nDefine the latitude column with the corresponding latitudes.\n\n4\n\nDefine the longitude column with the corresponding longitudes.\n\n5\n\nDisplay the sites data frame.\n\n\n\n\n        city latitude longitude\n1       Bath 51.38000 -2.360000\n2   Keynsham 51.41506 -2.502526\n3    Bristol 51.45451 -2.587910\n4 Chippenham 51.45806 -2.116074\n5 Trowbridge 51.31966 -2.208853\n\n\n\n\nStep 2: Plot the Map with Additional Layers\nNext, use ggplot2 to create a map with the world map data and add points from the sites data frame.\n\n\nCode\n1ggplot_map &lt;- ggplot2::ggplot(world_map) +\n2  ggplot2::geom_sf() +\n3  ggplot2::geom_point(data = sites, ggplot2::aes(x = longitude, y = latitude), size = 2, shape = 23, fill = \"darkred\") +\n4  ggplot2::theme_minimal() +\n5  ggplot2::labs(title = \"My Map\", x = \"Longitude\", y = \"Latitude\") +\n6  ggplot2::coord_sf(xlim = c(-3.6, -1.5), ylim = c(50.5, 52), expand = FALSE) +\n  ggplot2::theme(\n    panel.grid.major = element_line(color = gray(.5), \n7                                    linetype = \"dashed\", size = 0.5),\n8    panel.background = element_rect(fill = \"aliceblue\"))\n9ggplot_map\n\n\n\n1\n\nCreate a ggplot object using world_map data.\n\n2\n\nPlot the geographic features using geom_sf.\n\n3\n\nAdd points from sites data with longitude and latitude, customized size, shape, and fill colour.\n\n4\n\nApply a minimal theme to the plot.\n\n5\n\nAdd title and axis labels.\n\n6\n\nSet the spatial coordinates to focus.\n\n7\n\nCustomize the major grid lines.\n\n8\n\nSet the background colour to aliceblue.\n\n9\n\nDisplay the map.\n\n\n\n\n\n\n\n\n\n\n\nBy following these steps, you can add various layers to your static maps, enhancing the visualization with additional data points and custom styling."
  },
  {
    "objectID": "tutorials/2024-07-11-rtutorial-map-01/index.html#creating-an-interactive-map-with-leaflet",
    "href": "tutorials/2024-07-11-rtutorial-map-01/index.html#creating-an-interactive-map-with-leaflet",
    "title": "Creating Interactive Maps with R: A Beginner’s Guide Using ggplot2 and leaflet",
    "section": "Creating an Interactive Map with Leaflet",
    "text": "Creating an Interactive Map with Leaflet\n\nStep 1: Load the Libraries\nLoad the leaflet library\n\n\nCode\n1library(leaflet)\n\n\n\n1\n\nLoad the leaflet package for interactive maps.\n\n\n\n\n\n\nStep 2: Create the Map\nWe’ll create an interactive map centered on a specific location.\n\n\nCode\n1leaflet_map &lt;- leaflet::leaflet() %&gt;%\n2  leaflet::addTiles() %&gt;%\n3  leaflet::addMarkers(lng = -0.09, lat = 51.505, popup = \"Hello, London!\")\n4leaflet_map\n\n\n\n1\n\nInitialize a leaflet map object.\n\n2\n\nAdd default OpenStreetMap tiles to the map.\n\n3\n\nAdd a marker at the specified longitude and latitude with a popup message.\n\n4\n\nDisplay the map.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExplore Different Basemaps\n\n\n\nChange the basemap using addProviderTiles() function, e.g., addProviderTiles(providers$Stamen.Toner)\n\n\n\n\nStep 3: Customize the Map\nLet’s add more features, such as multiple markers and custom popups.\n\n\nCode\n1leaflet_map &lt;- leaflet::leaflet() %&gt;%\n2  leaflet::addTiles() %&gt;%\n3  leaflet::addMarkers(lng = c(-0.09, -0.1), lat = c(51.505, 51.51),\n4             popup = c(\"Hello, London!\", \"Another Location\"))\n5leaflet_map\n\n\n\n1\n\nInitialize a leaflet map object.\n\n2\n\nAdd default OpenStreetMap tiles to the map.\n\n3\n\nAdd multiple markers at specified longitudes and latitudes.\n\n4\n\nAdd custom popup messages for each marker.\n\n5\n\nDisplay the map."
  },
  {
    "objectID": "tutorials/2024-07-11-rtutorial-map-01/index.html#additional-customizations",
    "href": "tutorials/2024-07-11-rtutorial-map-01/index.html#additional-customizations",
    "title": "Creating Interactive Maps with R: A Beginner’s Guide Using ggplot2 and leaflet",
    "section": "Additional Customizations",
    "text": "Additional Customizations\n\nAdvanced ggplot2 Features\nTo enhance your static maps further, you can customize themes, add annotations, and use scale transformations. These advanced features can make your map more informative and visually appealing.\n\n\nCode\n1library(ggspatial)\n2library(ggrepel)\n\n3ggplot_map &lt;- ggplot2::ggplot(world_map) +\n4  ggplot2::geom_sf() +\n5  ggplot2::geom_point(data = sites, ggplot2::aes(x = longitude, y = latitude), size = 2, shape = 23, fill = \"darkred\") +\n  ggrepel::geom_text_repel (data =  sites,\n            ggplot2::aes(x = longitude, y = latitude,\n                         label= city), \n6            size = 4 ) +\n7  ggplot2::theme_minimal() +\n8  ggplot2::labs(title = \"My Map\", x = \"Longitude\", y = \"Latitude\") +\n9  ggplot2::coord_sf(xlim = c(-3.6, -1.5), ylim = c(50.5, 52), expand = FALSE) +\n  ggplot2::theme(\n    panel.grid.major = element_line(color = gray(.5), \n10                                    linetype = \"dashed\", size = 0.5),\n11    panel.background = element_rect(fill = \"aliceblue\")) +\n  ggspatial::annotation_north_arrow(\n     location = \"tl\",\n     pad_x = unit(0.1, \"in\"),\n     pad_y = unit(0.1, \"in\"),\n     style = ggspatial::north_arrow_fancy_orienteering(\n       line_col = \"black\",\n       text_size = 12,\n12       text_col = \"black\")) +\n  ggspatial::annotation_scale(\n    location = \"br\",\n    width_hint = 0.3,\n    text_cex = 0.5,\n    pad_x = unit(0.1, \"cm\"),\n13    pad_y = unit(0.1, \"cm\"))\n14ggplot_map\n\n\n\n1\n\nLoad the ggspatial package for spatial annotations.\n\n2\n\nLoad the ggrepel package for repelling text labels.\n\n3\n\nCreate a ggplot object using world_map data.\n\n4\n\nPlot the geographic features using geom_sf.\n\n5\n\nAdd points from sites data with longitude and latitude, customized size, shape, and fill colour.\n\n6\n\nAdd repelled text labels for city names using ggrepel.\n\n7\n\nApply a minimal theme to the plot.\n\n8\n\nAdd title and axis labels.\n\n9\n\nSet the spatial coordinates to focus.\n\n10\n\nCustomize the major grid lines.\n\n11\n\nSet the background colour to aliceblue.\n\n12\n\nAdd a north arrow annotation at the top left of the plot.\n\n13\n\nAdd a scale bar annotation at the bottom right of the plot.\n\n14\n\nDisplay the map.\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdvanced Leaflet Features\nFor interactive maps, leaflet offers advanced features that allow you to add layers, custom controls, and integrate with other web technologies.\n\n\n\n\n\n\nPolygons and Circles\n\n\n\nUse addPolygons() and addCircles() to highlight specific areas on your map.\n\n\n\n\nCode\n1leaflet_map &lt;- leaflet::leaflet() %&gt;%\n2  leaflet::addTiles() %&gt;%\n3  leaflet::addMarkers(lng = -0.09, lat = 51.505, popup = \"Hello, London!\") %&gt;%\n4  leaflet::addCircles(lng = -0.1, lat = 51.51, weight = 1, radius = 50,\n5             popup = \"Circle around another location\")\n6leaflet_map\n\n\n\n1\n\nInitialize a leaflet map object.\n\n2\n\nAdd default OpenStreetMap tiles to the map.\n\n3\n\nAdd a marker at the specified longitude and latitude with a popup message.\n\n4\n\nAdd a circle at the specified longitude and latitude with a specified weight and radius.\n\n5\n\nAdd a popup message for the circle.\n\n6\n\nDisplay the map.\n\n\n\n\n\n\n\n\nThese advanced features in ggplot2 and leaflet enable you to create detailed, informative, and visually appealing maps, whether they are static or interactive. By leveraging these tools, you can effectively communicate geographic data to your audience.\n\n\n\n\n\n\nCommon Mistakes\n\n\n\nWhen creating maps in R, there are a few common mistakes that can lead to errors or unexpected results. Here are some tips to help you avoid these pitfalls:\n\nWrong Coordinates: Ensure your longitude and latitude values are correct; otherwise, your markers will not appear where expected.\nMissing Libraries: Always load the necessary libraries before running your code.\nIncorrect Data Types: Make sure your longitude and latitude columns are numeric. If they are factors or characters, convert them using as.numeric().\nMismatched Coordinate Reference Systems (CRS): Ensure your spatial data and map layers use the same CRS to avoid misalignment.\nOverlapping Layers: Be careful with the order of layers in ggplot2. Layers added later will be on top of earlier ones, which might obscure important data.\nImproper Aesthetics Mapping: Double-check that the aes() function correctly maps your data columns to aesthetics in ggplot2.\nForgetting to Print the Plot: In scripts or R Markdown documents, ensure you explicitly print the ggplot object to render the plot.\nLarge Data Sets: For very large spatial data sets, rendering can be slow. Consider simplifying your data or using more efficient packages like sf.\nIncorrect File Paths: When loading spatial data from files, ensure the file paths are correct and the files are accessible.\nNot Saving Plots: If you want to save your plots, use functions like ggsave() for ggplot2 maps and htmlwidgets::saveWidget() for leaflet maps.\n\n\n\n\n\n\n\n\n\nTroubleshooting\n\n\n\nWhen things go wrong, here are some troubleshooting tips to help you diagnose and fix common issues:\n\nError: Object not found: Ensure all objects (e.g., data frames, variables) are defined in your environment.\nMap not displaying: Check your longitude and latitude values and ensure your map container is correctly set up if embedding in a Shiny app or R Markdown document.\nIncorrect CRS: If your spatial data doesn’t align, check and transform CRS using functions like st_transform() from the sf package.\nSlow Performance: If rendering is slow, consider reducing the complexity of your spatial data, using faster algorithms, or rendering smaller sections of the map.\nLayer Ordering Issues: If some layers are hidden, reorder your ggplot2 layers to ensure that important data is not obscured.\nLibrary Conflicts: Sometimes, functions from different libraries can conflict. Ensure you are calling functions with the correct namespace (e.g., ggplot2::geom_point()).\nMissing Data: Check for NA values in your data, especially in critical columns like longitude and latitude. Handle missing data appropriately.\nPlot Size: If your plot appears squished or improperly scaled, adjust the plot dimensions using ggsave() or fig.width and fig.height in R Markdown.\nBrowser Compatibility: For leaflet maps, ensure you are using a compatible web browser, and try refreshing the page if the map does not load.\nDependency Issues: Make sure all necessary packages and their dependencies are installed and up to date. Use install.packages() to install missing packages.\nResource Limits: For interactive maps, ensure your system has sufficient resources (memory, processing power) to handle large datasets and complex visualizations."
  },
  {
    "objectID": "tutorials/2024-07-11-rtutorial-map-01/index.html#faqs",
    "href": "tutorials/2024-07-11-rtutorial-map-01/index.html#faqs",
    "title": "Creating Interactive Maps with R: A Beginner’s Guide Using ggplot2 and leaflet",
    "section": "FAQs",
    "text": "FAQs\nQ: Can I save my interactive map as an HTML file?\nA: Yes, use the saveWidget() function from the htmlwidgets package.\nlibrary(htmlwidgets)\nsaveWidget(m, file = \"interactive_map.html\")\nQ: How do I add custom icons to my markers?\nA: You can use the makeIcon() function to add custom icons.\ncustom_icon &lt;- makeIcon(iconUrl = \"path/to/icon.png\", iconWidth = 30, iconHeight = 30)\nleaflet_map &lt;- leaflet::leaflet() %&gt;%\n  leaflet::addTiles() %&gt;%\n  leaflet::addMarkers(lng = -0.09, lat = 51.505, icon = custom_icon)\nleaflet_map"
  },
  {
    "objectID": "tutorials/2024-07-11-rtutorial-map-01/index.html#conclusion",
    "href": "tutorials/2024-07-11-rtutorial-map-01/index.html#conclusion",
    "title": "Creating Interactive Maps with R: A Beginner’s Guide Using ggplot2 and leaflet",
    "section": "Conclusion",
    "text": "Conclusion\nCreating maps in R is a valuable skill for data visualization. With ggplot2, you can make static maps, and with leaflet, you can create interactive maps that provide a more engaging user experience. Experiment with different features and customization options to make your maps stand out. Happy mapping!"
  },
  {
    "objectID": "tutorials/2024-07-11-rtutorial-map-01/index.html#additional-resources",
    "href": "tutorials/2024-07-11-rtutorial-map-01/index.html#additional-resources",
    "title": "Creating Interactive Maps with R: A Beginner’s Guide Using ggplot2 and leaflet",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nggplot2 Documentation\nleaflet for R Documentation\nMaps Cookbook"
  }
]